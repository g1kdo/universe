rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Events collection - public read, authenticated users can register, only admins can write
    match /events/{eventId} {
      allow read: if true; // Anyone can read events
      allow update: if request.auth != null; // Allow authenticated users to update (for registration)
      allow create, delete: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin' ||
         request.auth.token.role == 'organizer');
    }
    
    // Labs collection - public read, only admins can write
    match /labs/{labId} {
      allow read: if true; // Anyone can read labs
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // News collection - public read, only admins can write
    match /news/{newsId} {
      allow read: if true; // Anyone can read news
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin' ||
         request.auth.token.role == 'editor');
    }
    
    // User schedules collection - users can only access their own schedules
    match /user_schedules/{scheduleId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Lost & Found items collection - public read, authenticated users can create, owners can update/delete
    match /lostFoundItems/{itemId} {
      allow read: if true; // Anyone can read lost & found items
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reporterId; // Only authenticated users can create, must be the reporter
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.reporterId || // Owner can update
         request.auth.token.admin == true || // Admins can update
         request.auth.token.role == 'admin'); // Admin role can update
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.reporterId || // Owner can delete
         request.auth.token.admin == true || // Admins can delete
         request.auth.token.role == 'admin'); // Admin role can delete
    }
    
    // Clubs collection - public read, authenticated users can create, admins can update/delete
    match /clubs/{clubId} {
      allow read: if true; // Anyone can read clubs
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.presidentId; // Only authenticated users can create, must be the president
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.adminIds || // Club admins can update
         request.auth.token.admin == true || // System admins can update
         request.auth.token.role == 'admin'); // Admin role can update
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.presidentId || // Only president can delete
         request.auth.token.admin == true || // System admins can delete
         request.auth.token.role == 'admin'); // Admin role can delete
    }
    
    // Alternative simpler rules for development/testing
    // Uncomment these and comment out the above rules if you want more permissive access
    
    /*
    // Development rules - more permissive
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    */
  }
}
